{
	"info": {
		"_postman_id": "42dac253-ec54-487e-828e-30754a1fe0bb",
		"name": "Laravel 11 Blog Management API",
		"description": "A complete collection for testing the Laravel 11 Blog Management API with authentication, posts, categories, and Excel/CSV operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32506617"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    pm.expect(jsonData.token).to.exist;",
									"});",
									"",
									"if (jsonData.token) {",
									"    pm.environment.set(\"auth_token\", jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"password_confirmation\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "Register a new user and get an authentication token."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    pm.expect(jsonData.token).to.exist;",
									"});",
									"",
									"if (jsonData.token) {",
									"    pm.environment.set(\"auth_token\", jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "Login with admin credentials. You can also use editor@example.com with the same password."
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logout successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
									"});",
									"",
									"pm.environment.unset(\"auth_token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"logout"
							]
						},
						"description": "Logout and invalidate the current token."
					},
					"response": []
				}
			],
			"description": "Endpoints for user registration, login, and logout."
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "List All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.exist;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"posts"
							],
							"query": [
								{
									"key": "search",
									"value": "test",
									"description": "Optional search term",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination",
									"disabled": true
								}
							]
						},
						"description": "Get a paginated list of all posts. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Post created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Post created successfully\");",
									"    pm.expect(jsonData.post).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Post Title\",\n    \"body\": \"This is the content of the test post. It can be a long text with multiple paragraphs.\",\n    \"category_id\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"posts"
							]
						},
						"description": "Create a new post. Requires authentication and post-create permission."
					},
					"response": []
				},
				{
					"name": "Get Single Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.exist;",
									"    pm.expect(jsonData.data.id).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"posts",
								"1"
							]
						},
						"description": "Get a single post by ID. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Update Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Post updated successfully\");",
									"    pm.expect(jsonData.post).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Post Title\",\n    \"body\": \"This is the updated content of the post.\",\n    \"category_id\": 2\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"posts",
								"1"
							]
						},
						"description": "Update an existing post. Requires authentication and either post-edit permission or being the post author."
					},
					"response": []
				},
				{
					"name": "Delete Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post deleted successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Post deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"posts",
								"1"
							]
						},
						"description": "Delete a post. Requires authentication and either post-delete permission or being the post author."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing blog posts."
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.exist;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories"
							]
						},
						"description": "Get a list of all categories. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Category created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Category created successfully\");",
									"    pm.expect(jsonData.category).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Category\",\n    \"slug\": \"new-category\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories"
							]
						},
						"description": "Create a new category. Requires authentication and category-manage permission."
					},
					"response": []
				},
				{
					"name": "Get Single Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.exist;",
									"    pm.expect(jsonData.data.id).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/categories/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"1"
							]
						},
						"description": "Get a single category by ID. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Update Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Category updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Category updated successfully\");",
									"    pm.expect(jsonData.category).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Category\",\n    \"slug\": \"updated-category\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/categories/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"1"
							]
						},
						"description": "Update an existing category. Requires authentication and category-manage permission."
					},
					"response": []
				},
				{
					"name": "Delete Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 422\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 422]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Category deleted successfully\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.eql(\"Category deleted successfully\");",
									"    });",
									"} else if (pm.response.code === 422) {",
									"    pm.test(\"Cannot delete category with posts\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.eql(\"Cannot delete category with existing posts\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/categories/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"1"
							]
						},
						"description": "Delete a category. Requires authentication and category-manage permission. Will fail if the category has associated posts."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing blog categories."
		},
		{
			"name": "Excel Operations",
			"item": [
				{
					"name": "Export Categories (Excel)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/categories/export",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"export"
							]
						},
						"description": "Export all categories to an Excel file. Requires authentication and category-manage permission."
					},
					"response": []
				},
				{
					"name": "Export Posts (Excel)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/posts/export",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"posts",
								"export"
							]
						},
						"description": "Export all posts to an Excel file. Requires authentication and post-edit permission."
					},
					"response": []
				},
				{
					"name": "Import Categories (Excel)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Categories imported successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Categories imported successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/path/to/your/categories.xlsx"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/categories/import",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"import"
							]
						},
						"description": "Import categories from an Excel file. Requires authentication and category-manage permission."
					},
					"response": []
				}
			],
			"description": "Endpoints for Excel and CSV import/export operations."
		},
		{
			"name": "Public",
			"item": [
				{
					"name": "Public Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.exist;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/public/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"public",
								"posts"
							],
							"query": [
								{
									"key": "search",
									"value": "test",
									"description": "Optional search term",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination",
									"disabled": true
								}
							]
						},
						"description": "Get a paginated list of all posts. This is a public endpoint that doesn't require authentication."
					},
					"response": []
				}
			],
			"description": "Public endpoints that don't require authentication."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}